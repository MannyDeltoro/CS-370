import random
import gym
import numpy as np
from collections import deque
from keras.models import Sequential, clone_model, load_model
from keras.layers import Dense
from keras.optimizers import Adam
from scores.score_logger import ScoreLogger

ENV_NAME = "CartPole-v1"

# Hyperparameters
GAMMA = 0.95
LEARNING_RATE = 0.001

MEMORY_SIZE = 1000000
BATCH_SIZE = 32

EXPLORATION_MAX = 1.0
EXPLORATION_MIN = 0.01
EXPLORATION_DECAY = 0.995
TARGET_UPDATE_FREQ = 10  # how often to sync target model


class DQNSolver:

    def __init__(self, observation_space, action_space):
        self.exploration_rate = EXPLORATION_MAX
        self.action_space = action_space
        self.memory = deque(maxlen=MEMORY_SIZE)

        # Main model
        self.model = self._build_model(observation_space)

        # Target model
        self.target_model = clone_model(self.model)
        self.target_model.set_weights(self.model.get_weights())
        self.update_counter = 0

    def _build_model(self, input_dim):
        model = Sequential()
        model.add(Dense(24, input_shape=(input_dim,), activation="relu"))
        model.add(Dense(24, activation="relu"))
        model.add(Dense(self.action_space, activation="linear"))
        model.compile(loss="mse", optimizer=Adam(learning_rate=LEARNING_RATE))
        return model

    def remember(self, state, action, reward, next_state, done):
        self.memory.append((state, action, reward, next_state, done))

    def act(self, state):
        if np.random.rand() < self.exploration_rate:
            return random.randrange(self.action_space)
        q_values = self.model.predict(state, verbose=0)
        return np.argmax(q_values[0])

    def experience_replay(self):
        if len(self.memory) < BATCH_SIZE:
            return

        batch = random.sample(self.memory, BATCH_SIZE)

        for state, action, reward, next_state, done in batch:
            q_update = reward
            if not done:
                q_update += GAMMA * np.amax(self.target_model.predict(next_state, verbose=0)[0])
            q_values = self.model.predict(state, verbose=0)
            q_values[0][action] = q_update
            self.model.fit(state, q_values, verbose=0)

        # Update exploration rate
        self.exploration_rate *= EXPLORATION_DECAY
        self.exploration_rate = max(EXPLORATION_MIN, self.exploration_rate)

        # Update target network periodically
        self.update_counter += 1
        if self.update_counter % TARGET_UPDATE_FREQ == 0:
            self.target_model.set_weights(self.model.get_weights())

    def save(self, filename="cartpole_dqn.h5"):
        self.model.save(filename)

    def load(self, filename="cartpole_dqn.h5"):
        self.model = load_model(filename)
        self.target_model = clone_model(self.model)
        self.target_model.set_weights(self.model.get_weights())


def cartpole():
    env = gym.make(ENV_NAME)
    score_logger = ScoreLogger(ENV_NAME)
    observation_space = env.observation_space.shape[0]
    action_space = env.action_space.n
    dqn_solver = DQNSolver(observation_space, action_space)

    run = 0
    while True:
        run += 1
        state = env.reset()
        state = np.reshape(state, [1, observation_space])
        step = 0
        total_reward = 0

        while True:
            step += 1
            action = dqn_solver.act(state)
            next_state, reward, done, _, _ = env.step(action)
            total_reward += reward

            reward = reward if not done else -100  # stronger penalty for failure
            next_state = np.reshape(next_state, [1, observation_space])
            dqn_solver.remember(state, action, reward, next_state, done)
            state = next_state

            if done:
                print(f"Run: {run}, score: {step}, exploration: {dqn_solver.exploration_rate:.4f}")
                score_logger.add_score(step, run)
                break

            dqn_solver.experience_replay()
